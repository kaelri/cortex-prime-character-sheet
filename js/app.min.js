window.cortexFunctions = {

	arraysMatch: function( a, b ) {
		if ( !Array.isArray(a) || !Array.isArray(b) ) return false;
		if ( a.length !== b.length ) return false;
		for (let i = 0; i < a.length; i++) {
			if ( a[i] !== b[i] ) return false;
		}
		return true;
	}
	
}

Vue.component('characterSheet', {

	props: {
		character: Object,
		editable:  Boolean,
		selected:  Array
	},

	computed: {

		name() {
			return this.character?.name ?? '';
		},

		description() {
			return this.character?.description ?? '';
		},

		portrait() {
			return this.character?.portrait ?? null;
		},

		traitSets() {
			return this.character?.traitSets ?? [];
		},

		distinctions() {
			return this.traitSets.find( traitSet => traitSet.style === 'distinctions' );
		},

		attributes() {
			return this.traitSets.find( traitSet => traitSet.location === 'attributes' )?.traits || [];
		},

		attributesID() {
			return this.traitSets.findIndex( traitSet => traitSet.location === 'attributes' );
		}

	},

	/*html*/
	template: `<section class="character-sheet">
	
		<div class="pages">

			<!-- PAGE -->
			<div class="page">
				<div class="page-inner">

					<header :class="{'page-header': true, 'selected': isSelected(['name'])}"
						@click.prevent="select([ 'name' ])"
					>

						<!-- CHARACTER NAME -->
						<div class="title-container">

							<div class="title"
								v-html="name"
							></div>

							<div class="title-decoration">
								<svg height="4" width="100%"><line x1="0" y1="0" x2="10000" y2="0" style="stroke:#C50852;stroke-width:4pt"/></svg>
							</div>

						</div>

						<!-- CHARACTER DESCRIPTION -->
						<div class="subtitle">
							<span v-html="renderText(description)"></span>
						</div>

					</header>

					<!-- COLUMNS -->
					<div class="columns">

						<div v-for="pageLocation in ['left', 'right']" :class="'column-' + pageLocation">

							<!-- IMAGE -->
							<div class="portrait" v-if="pageLocation === 'right'"
								@click.prevent="select([ 'portrait' ])"
							>
								<div class="portrait-circle" width=100% height=100%>
									<img src="" width="110%" draggable="false" class="image"></img>
								</div>
							</div>

							<!-- ATTRIBUTES -->
							<div class="attribute-curve" xmlns="http://www.w3.org/2000/svg"
								:style="'display: ' + ( attributes.length >= 2 ? 'block' : 'none' ) + ';'"
								v-if="pageLocation === 'right'"
							>
								<svg viewBox="0 0 62 62" width="62mm" height="30mm" preserveAspectRatio="xMidYMid slice">
									<path d="M -17 -25 A 32 32 0 0 0 79 0" stroke="#C50852" stroke-width="0.5mm" fill="transparent" vector-effect="non-scaling-stroke"/>
								</svg>
							</div>

							<div :class="{ 'attributes': true, 'vertical': attributes.length > 5 }"
								v-if="pageLocation === 'right'"
							>
								<div v-for="( attribute, a ) in attributes"
									:class="{ 'attribute': true, 'vertical': attributes.length > 5 }"
									:style="getAttributeStyle( a )"
									@click.prevent="select([ 'trait', attributesID, a ])"
								>

									<span class="c"
										v-html="attribute.value"
									></span>

									<div class="attribute-name"
										v-html="attribute.name"
									></div>

								</div>

								<!-- BUTTON: ADD ATTRIBUTE -->
								<div class="attribute-placeholder add-item"
									@click.prevent="addTrait( attributesID )"
								>
									<span><i class="far fa-square-plus"></i></span>
								</div>
								
							</div>

							<!-- TRAITS -->
							<div :class="'trait-set style-' + traitSet.style"
								v-for="(traitSet, s) in traitSets"
								v-if="traitSet.location === pageLocation"
							>

								<div class="trait-set-header"
									@click.prevent="select([ 'traitSet', s ])"
								>
									<div v-html="traitSet.name"></div>
								</div>

								<div class="trait-columns">
									<div class="trait-column" v-for="traitSetLocation in ['left', 'right']">

										<div :class="{ 'trait': true, 'selected': isSelected(['trait', s, t]) }"
											v-for="(trait, t) in traitSet.traits"
											v-if="trait.location === traitSetLocation"
											@click.prevent="select([ 'trait', s, t ])"
										>

											<h2 class="trait-title">

												<span class="trait-name"
													v-html="trait.name"
												></span>
											
												<span class="trait-value c"
													v-html="trait.value"
												></span>

											</h2>

											<hr>

											<div
												class="trait-description"
												v-html="renderText(trait.description)"
											></div>

											<ul class="trait-sfx" v-if="trait.sfx && trait.sfx.length">
												<li v-for="(sfx, s) in trait.sfx">

													<span class="trait-sfx-name"
														v-html="sfx.name"
													></span>:

													<span class="trait-sfx-description"
														v-html="renderText(sfx.description)"
													></span>

												</li>
											</ul>

										</div>

										<!-- BUTTON: ADD TRAIT -->
										<div class="trait-placeholder add-item"
											@click.prevent="addTrait( s, traitSetLocation )"
										>
											<span><i class="far fa-square-plus"></i></span>
										</div>

									</div> <!-- .trait-column -->
								</div> <!-- .trait-columns -->

							</div>

							<!-- BUTTON: ADD TRAIT GROUP -->
							<div class="trait-set-placeholder add-item"
								@click.prevent="addTraitSet( pageLocation )"
							>
								<span><i class="far fa-square-plus"></i></span>
							</div>
							
						</div>

					</div> <!-- .columns -->
				</div> <!-- .page-inner -->
			</div> <!-- .page -->
		</div> <!-- .pages -->
	</section>`,

	methods: {

		isSelected( selector ) {
			return cortexFunctions.arraysMatch( this.selected, selector );
		},

		renderText( text ) {
			text = text.replace( /d(\d)/g, '<span class="c">$1</span>' );
			text = text.replace( /([^\w])PP([^\w])/g, '$1<span class="pp">PP</span>$2' );
			return text;
		},

		getAttributeStyle( a ) {

			let cssLeft, cssTop;

			if ( this.attributes.length === 1 ) {

				cssLeft = ((115 + 176) * 0.5 + 3.5) + 'mm';
				cssTop  = '120mm';

			} else {

				let alpha = a / (this.attributes.length-1);

				let left = 115;
				let right = 176;
				let height = 10;
				let top = 107.5;
				
				let x = (right - left) * alpha + left + 3.5;
				cssLeft = x + 'mm';
				
				let y =  Math.sin(alpha * 3.1415926535) * height + top - 3;
				cssTop = y + 'mm';
			}

			return `left: ${cssLeft}; top: ${cssTop};`;

		},
		
		addTraitSet( location ) {
			this.$emit( 'addTraitSet', location );
		},

		addTrait( traitSetID, location ) {
			this.$emit( 'addTrait', traitSetID, location );
		},

		select( selector ) {
			this.$emit( 'select', selector );
		}
		
	}

});

Vue.component('characterEditor', {

	props: {
		character: Object,
		editable:  Boolean,
		selected:  Array
	},

	data: function() {
		let data = structuredClone(this.character);
		return data;
	},

	computed: {

		title() {
			return this.name ?? 'Character';
		},

		selectedName() {
			return cortexFunctions.arraysMatch( this.selected, ['name'] );
		},

		selectedTraitSetID() {

			if (
				this.selected
				&& 
				this.selected.length >= 2
				&&
				[ 'trait', 'traitSet' ].includes( this.selected[0] )
			) {
				return this.selected[1];
			}

			return null; // default

		},

		selectedTraitID() {
			if (
				this.selected
				&& 
				this.selected.length >= 3
				&&
				this.selected[0] === 'trait'
			) {
				return this.selected[2];
			}

			return null; // default

		},

		selectedTrait() {

				if (
					this.selectedTraitSetID !== null
					||
					this.selectedTraitID !== null
				) {
					return this.traitSets[ this.selectedTraitSetID ].traits[ this.selectedTraitID ];
				};
	
				return null; // default
	
		},

		selectedTraitName: {
			get() {
				return this.selectedTrait?.name;
			},
			set( content ) {
				this.editContent( content, [ 'traitSet', this.selectedTraitSetID, 'trait', this.selectedTraitID, 'name' ] );
			}
		},

		selectedTraitDescription: {
			get() {
				return this.selectedTrait?.description;
			},
			set( content ) {
				this.editContent( content, [ 'traitSet', this.selectedTraitSetID, 'trait', this.selectedTraitID, 'description' ] );
			}
		},

		// Replace with: computed list of all traits, inc. reference to trait set, and <trait-editor> module

	},

	/*html*/
	template: `<section class="character-editor">

		<nav class="breadcrumbs">
			<ul>
				<li v-text="title" @click.prevent="clearSelected"></li>
				<li v-if="selectedName">Name &amp; Description</li>
				<li v-if="selectedTrait" v-text="selectedTrait.name"></li>
			</ul>
		</nav>

		<!-- NAME & DESCRIPTION -->
		<section :class="{ 'editor-group': true, 'open': selectedName }">

			<div class="editor-fields">

				<div class="editor-field">
					<label>Character Name</label>
					<input type="text" v-model="name" ref="inputName">
				</div>

				<div class="editor-field">
					<label>Description</label>
					<textarea v-model="description"></textarea>
				</div>

			</div>

		</section>
	
		<!-- TRAIT -->
		<section :class="{ 'editor-group': true, 'open': selectedTrait !== null }">

			<div class="editor-fields" v-if="selectedTrait">

				<div class="editor-field">
					<label>Trait Name</label>
					<input type="text" v-model="selectedTraitName">
				</div>

				<div class="editor-field">
					<label>Description</label>
					<textarea v-model="selectedTraitDescription"></textarea>
				</div>

			</div>

		</section>
	
	</section>`,

	watch: {

		name() {
			this.export();
		},

		description() {
			this.export();
		},

	},

	methods: {

		clearSelected() {
			this.$emit('select', []);
		},

		editContent( content, location ) {

			switch ( location[0] ) {
				case 'name':
					this.name = String(content);
					break;
				case 'description':
					this.description = String(content);
					break;
				case 'traitSet':
					let s = location[1];
					let traitSet = this.traitSets[s];
					switch ( location[2] ) {
						case 'name':
							traitSet.name = String(content);
							break;
						case 'trait':
							let t = location[3];
							let trait = traitSet.traits[t];
							switch ( location[4] ) {
								case 'name':
									trait.name = String(content);
									break;
								case 'value':
									trait.value = Number(content);
									break;
								case 'description':
									trait.description = String(content);
									break;
								case 'sfx':
									let f = location[3];
									switch ( location[4] ) {
										case 'name':
											trait.sfx[f].name = String(content);
											break;
										case 'description':
											trait.sfx[f].description = String(content);
											break;
										default: break;
									}
								default: break;
							}
							traitSet.traits[t] = trait;
							break;
						default: break;
					}
					this.$set(this.traitSets, s, traitSet);
					break;
				default:
					break;
			}

			this.export();

		},

		addTraitSet( location ) {

			this.traitSets.push({
				name: 'New trait group',
				style: 'default',
				location: location ?? 'left',
				traits: [
					{
						name: 'New trait',
						value: 6,
						description: 'Trait description',
						location: 'left',
					}
				],
			});

			this.export();

		},

		removeSet( traitSetID ) {

			this.traitSets.splice( traitSetID, 1 );

			this.export();

		},
		
		addTrait( traitSetID, location ) {

			let traitSet = this.traitSets[traitSetID];

			traitSet.traits.push({
				name: 'New trait',
				value: 6,
				description: 'Trait description',
				location: location ?? 'left'
			});

			this.$set(this.traitSets, traitSetID, traitSet);

			this.export();

		},
		
		removeTrait( traitSetID, traitID ) {

			let traitSet = this.traitSets[traitSetID];

			traitSet.traits.splice(traitID, 1);

			this.$set(this.traitSets, traitSetID, traitSet);

			this.export();

		},

		export() {

			let character = {
				id:           this.id,
				modified:     this.modified,
				name:         this.name,
				description:  this.description,
				traitSets:    this.traitSets,
				portrait:     this.portrait,
			}

			this.$emit('edited', character);

		},
		
	}

});

document.addEventListener('DOMContentLoaded', () => {

	new Vue({

		name: 'cortex-tools',

		el: '#cortex-tools',

		data: {

			// CONTENT
			baseURL: window.location.href,
			character: null,

			// VIEW
			selected: null,
			editable: true,

		},

		computed: {

		},

		/*html*/
		template: `<article id="cortex-tools">
		
			<header class="header">

				<div class="header-collapsed-content">
				</div>

				<div class="header-expanded-content">

					<section class="controls">

						<!-- CHARACTER EDITOR -->
						<character-editor
							ref="characterEditor"
							v-if="character"
							:character="character"
							:selected="selected"
							:editable="editable"
							@edited="setCharacter"
							@select="select"
						></character-editor>

					</section>

					<footer class="footer">

						<div class="footer-logo">
							<a href="https://cortexrpg.com" target="_blank"><img src="images/cortex_community_logo_white.png"></a>
						</div>

						<div class="footer-legal">
								<p>Cortex Prime is the award-winning world-building tabletop RPG system for forging unique, compelling game experiences from a set of modular rules mechanics available at CortexRPG.com </p>
								<p>Cortex is ©️ 2022 Fandom, Inc. Cortex, Cortex Prime, associated logos and trade dress are the trademarks of Fandom, Inc. Iconography used with permission.</p>
								<p>If you wish to publish or sell what you make using this tool, it is your responsibility to ensure you have the proper license or right for any resources used. No rights are granted through the use of this tool.</p>
						</div>

					</footer>

				</div>
				
			</header>

			<main class="main">
			
				<!-- CHARACTER SHEET -->
				<character-sheet
					v-if="character"
					:character="character"
					:selected="selected"
					:editable="editable"
					@addTraitSet="addTraitSet"
					@addTrait="addTrait"
					@select="select"
				></character-sheet>

			</main>

		</article>`,
		
		mounted() {

			this.loadLocal();

		},

		watch: {
			character( character ) {
				pageTitle = 'Cortex Tools';
				if ( character.name && character.name.length ) {
					pageTitle = `${character.name} | ${pageTitle}`;
				}
				document.title = pageTitle;
			},
		},

		methods: {

			async createDefaultCharacter() {

				let character = await fetch( this.baseURL + 'data/cortex_character_default.json' )
				.then( response => response.json() );

				//+ Check for errors

				character.id = crypto.randomUUID();
				character.modified = ( new Date() ).getTime();

				return character;

			},

			setCharacter( character ) {
				this.character = character;
				this.saveLocal();
			},

			select( selector ) {

				if ( cortexFunctions.arraysMatch( this.selected, selector ) ) {
					this.selected = [];
					return;
				}

				this.selected = selector;
			},

			addTraitSet( location ) {
				this.$refs.characterEditor.addTraitSet( location );
			},

			addTrait( traitSetID, location ) {
				this.$refs.characterEditor.addTrait( traitSetID, location );
			},

			async loadLocal() {

				let character = null;

				let localJSON = localStorage.getItem('cortexToolsData');
				if ( localJSON && localJSON.length ) {

					let localData = JSON.parse(localJSON);
					if ( localData ) {
						character = localData.character;
					}
	
				}

				if ( !character ) {
					character = await this.createDefaultCharacter();
				}

				this.character = character;

			},

			saveLocal() {

				this.character.modified = ( new Date() ).getTime();

				localStorage.setItem('cortexToolsData', JSON.stringify({
					character: this.character,
				}));
			},

		}

	});

});
