window.cortexFunctions = {

	arraysMatch: function( a, b ) {
		if ( !Array.isArray(a) || !Array.isArray(b) ) return false;
		if ( a.length !== b.length ) return false;
		for (let i = 0; i < a.length; i++) {
			if ( a[i] !== b[i] ) return false;
		}
		return true;
	},

	getDieDisplayValue: function( dieValue ) {
		switch ( dieValue ) {
			case 4:  return '4';
			case 6:  return '6';
			case 8:  return '8';
			case 10: return '0';
			case 12: return '2';
			default: return '';
		}
	}
	
}

Vue.component('characterSheet', {

	props: {
		character: Object,
		selected:  Array
	},

	computed: {

		name() {
			return this.character?.name ?? '';
		},

		description() {
			return this.character?.description ?? '';
		},

		portrait() {
			return this.character?.portrait ?? null;
		},

		traitSets() {
			return this.character?.traitSets ?? [];
		},

		distinctions() {
			return this.traitSets.find( traitSet => traitSet.style === 'distinctions' );
		},

		attributes() {
			return this.traitSets.find( traitSet => traitSet.location === 'attributes' )?.traits || [];
		},

		attributesID() {
			return this.traitSets.findIndex( traitSet => traitSet.location === 'attributes' );
		}

	},

	/*html*/
	template: `<section class="character-sheet">
	
		<div class="pages">

			<!-- PAGE -->
			<div class="page">
				<div class="page-inner">

					<header class="page-header">

						<div :class="{'page-header-inner': true, 'selected': isSelected(['name'])}"
							@click.stop="select([ 'name' ])"
						>
							<div>

								<!-- CHARACTER NAME -->
								<div class="title-container">

									<div class="title"
										v-html="name"
									></div>

									<div class="title-decoration">
										<svg height="4" width="100%"><line x1="0" y1="0" x2="10000" y2="0" style="stroke:#C50852;stroke-width:4pt"/></svg>
									</div>

								</div>

								<!-- CHARACTER DESCRIPTION -->
								<div class="subtitle">
									<span v-html="renderText(description)"></span>
								</div>

							</div>
						</div>

						<name-editor
							:character="character"
							:open="isSelected(['name'])"
							@select="select"
							@update="update"
						></name-editor>

					</header>

					<!-- COLUMNS -->
					<div class="columns">

						<div v-for="pageLocation in ['left', 'right']" :class="'column-' + pageLocation">

							<!-- IMAGE -->
							<div class="portrait" v-if="pageLocation === 'right'">

								<div :class="{ 'portrait-inner': true, 'selected': isSelected(['portrait']) }"
									@click.stop="select([ 'portrait' ])"
								>
									<div class="portrait-circle" width="100%" height="100%" :style="'background-image: url(' + portrait.url + ');'"></div>
								</div>

								<portrait-editor
									:character="character"
									:open="isSelected(['portrait'])"
									@select="select"
									@update="update"
								></portrait-editor>
	
							</div>

							<!-- ATTRIBUTES -->
							<div :class="{ 'attributes': true, 'vertical': attributes.length > 5 }" v-if="pageLocation === 'right'">

								<div class="attributes-grid">

									<div class="attribute-curve" xmlns="http://www.w3.org/2000/svg"
										:style="'display: ' + ( attributes.length >= 2 ? 'block' : 'none' ) + ';'"
										v-if="pageLocation === 'right'"
									>
										<svg viewBox="0 0 62 62" width="62mm" height="30mm" preserveAspectRatio="xMidYMid slice">
											<path d="M -17 -25 A 32 32 0 0 0 79 0" stroke="#C50852" stroke-width="0.5mm" fill="transparent" vector-effect="non-scaling-stroke"/>
										</svg>

									</div>

									<div class="attributes-items"
										v-if="pageLocation === 'right'"
									>
										<div v-for="( attribute, a ) in attributes"
											class="attribute"
											:style="getAttributeStyle( a )"
										>

											<div class="attribute-inner"
												:class="{ 'attribute-inner': true, 'selected': isSelected(['trait', attributesID, a]) }"
												@click.stop="select([ 'trait', attributesID, a ])"
											>

												<span class="c"
													v-html="renderDieValue(attribute.value)"
												></span>

												<div class="attribute-name"
													v-html="attribute.name"
												></div>

											</div>

											<trait-editor
												:character="character"
												:open="isSelected(['trait', attributesID, a])"
												:traitSetID="attributesID"
												:traitID="a"
												@select="select"
												@update="update"
												@removeTrait="removeTrait"
											></trait-editor>

										</div>

									</div>

								</div>

								<!-- BUTTON: ADD ATTRIBUTE -->
								<div class="preview-button-container"
									v-if="pageLocation === 'right'"
								>
									<div class="preview-button"
										@click.stop="addTrait( attributesID )"
									>
										<span><i class="fas fa-plus"></i> New Attribute</span>
									</div>
								</div>

							</div>
								
							<!-- TRAITS -->
							<div :class="'trait-set style-' + traitSet.style"
								v-for="(traitSet, s) in traitSets"
								v-if="traitSet.location === pageLocation"
							>

								<div class="trait-set-header">
									<div :class="{'trait-set-header-inner': true, 'selected': isSelected(['traitSet', s])}"
										@click.stop="select([ 'traitSet', s ])"
									>

										<div v-html="traitSet.name"></div>

									</div>

									<trait-set-editor
										:character="character"
										:open="isSelected(['traitSet', s])"
										:traitSetID="s"
										@select="select"
										@update="update"
										@removeTraitSet="removeTraitSet"
									></trait-set-editor>

								</div>

								<div class="trait-columns">
									<div class="trait-column" v-for="traitSetLocation in ['left', 'right']">

										<div class="trait"
											v-for="(trait, t) in traitSet.traits"
											v-if="trait.location === traitSetLocation"
										>
											<div :class="{ 'trait-inner': true, 'selected': isSelected(['trait', s, t]) }"
												@click.stop="select([ 'trait', s, t ])"
											>

												<h2 class="trait-title">

													<span class="trait-name"
														v-html="trait.name"
													></span>
												
													<span class="trait-value c"
														v-html="renderDieValue(trait.value)"
													></span>

												</h2>

												<hr>

												<div
													class="trait-description"
													v-html="renderText(trait.description)"
												></div>

												<ul class="trait-sfx" v-if="trait.sfx && trait.sfx.length">
													<li v-for="(sfx, s) in trait.sfx">

														<span class="trait-sfx-name"
															v-html="sfx.name"
														></span>:

														<span class="trait-sfx-description"
															v-html="renderText(sfx.description)"
														></span>

													</li>
												</ul>

											</div>

											<trait-editor
												:character="character"
												:open="isSelected(['trait', s, t])"
												:traitSetID="s"
												:traitID="t"
												@select="select"
												@update="update"
												@removeTrait="removeTrait"
											></trait-editor>

										</div>

										<!-- BUTTON: ADD TRAIT -->
										<div class="preview-button-container">
											<div class="preview-button"
												@click.stop="addTrait( s, traitSetLocation )"
											>
												<span><i class="fas fa-plus"></i> New Trait</span>
											</div>
										</div>

									</div> <!-- .trait-column -->
								</div> <!-- .trait-columns -->

							</div>

							<!-- BUTTON: ADD TRAIT SET -->
							<div class="preview-button-container">
								<div class="trait-set-placeholder preview-button"
									@click.stop="addTraitSet( pageLocation )"
								>
									<span><i class="fas fa-plus"></i> New Trait Set</span>
								</div>
							</div>
							
						</div>

					</div> <!-- .columns -->
				</div> <!-- .page-inner -->
			</div> <!-- .page -->
		</div> <!-- .pages -->
	</section>`,

	methods: {

		// PRESENTATION

		isSelected( selector ) {
			return cortexFunctions.arraysMatch( this.selected, selector );
		},

		renderText( text ) {
			text = text.replace( /d\d*(\d)/g, '<span class="c">$1</span>' );
			// text = text.replace( '<span class="c">1(\d)</span>', '<span class="c">$1</span>' );
			text = text.replace( /([^A-Za-z])PP([^A-Za-z])/gi, '$1<span class="pp">PP</span>$2' );
			text = text.replace( "\n", '<br>' );
			return text;
		},

		renderDieValue( value ) {
			return cortexFunctions.getDieDisplayValue( value );
		},


		getAttributeStyle( a ) {

			let top    = 7;
			let left   = 8;
			let right  = left + 61;
			let height = 10;

			let alpha;

			if ( this.attributes.length === 1 ) {
				alpha = .5;
			} else {
				alpha = a / ( this.attributes.length - 1 );
			}

			let x = (right - left) * alpha + left + 3.5;
			let y = Math.sin(alpha * Math.PI) * height + top - 3;
			
			return `left: ${x}mm; top: ${y}mm;`;

		},
		
		// SELECTING

		select( selector ) {
			this.$emit( 'select', selector );
		},

		clearSelected() {
			this.$emit('select', []);
		},

		// EDITING

		addTraitSet( location ) {

			let character = structuredClone( this.character );

			character.traitSets.push({
				name: 'New trait set',
				description: 'Trait set description',
				style: 'default',
				location: location ?? 'left',
				traits: [
					{
						name: 'New trait',
						value: 6,
						description: 'Trait description',
						location: 'left',
					}
				],
			});

			this.update( character );

			let newTraitSetID = character.traitSets.length - 1;
			this.select([ 'traitSet', newTraitSetID ]);

		},

		removeTraitSet( traitSetID ) {

			// if ( this.isSelected(['traitSet', traitSetID]) ) {
				this.clearSelected();
			// }

			let character = structuredClone( this.character );

			character.traitSets.splice(traitSetID, 1);

			this.update( character );

		},
		
		addTrait( traitSetID, location ) {

			let character = structuredClone( this.character );

			character.traitSets[traitSetID].traits.push({
				name: 'New trait',
				value: 6,
				description: 'Trait description',
				location: location ?? 'left',
				sfx: [],
			});

			this.update( character );
			
			let newTraitID = character.traitSets[traitSetID].traits.length - 1;
			this.select([ 'trait', traitSetID, newTraitID ]);

		},

		removeTrait( traitSetID, traitID ) {

			/*// If we’re removing the trait that is currently selected, switch to the previous trait, or the parent trait set if no other traits remain.
			if ( this.isSelected(['trait', traitSetID, traitID]) ) {
				if ( this.character.traitSets[traitSetID].traits.length > 1) {
					this.select([ 'trait', traitSetID, traitID - 1 ]);
				} else {
					this.select( 'traitSet', traitSetID );
				}
			} else {*/
				this.clearSelected();
			/*}*/

			let character = structuredClone( this.character );

			character.traitSets[traitSetID].traits.splice(traitID, 1);

			this.update( character );

		},

		dragPortrait( event ) {
			console.log(event);
		},

		update( character ) {
			this.$emit( 'update', character );
		}

	}

});

Vue.component('nameEditor', {

	props: {
		character: Object,
		open: Boolean
	},

	data() {
		return {}
	},

	computed: {

		name: {
			get() {
				return this.character.name;
			},
			set( name ) {
				this.setCharacterProperty( 'name', name );
			}
		},
		
		description: {
			get() {
				return this.character.description;
			},
			set( description ) {
				this.setCharacterProperty( 'description', description );
			}
		},

	},

	/*html*/
	template: `<aside :class="{ 'editor': true, 'editor-character': true, 'open': open, 'scrollable': false }">

		<div class="editor-arrow"></div>

		<div class="editor-controls">
			<button @click.stop="select([])"><i class="fas fa-times"></i></button>
		</div>

		<div class="editor-inner">

			<div class="editor-fields">

				<div class="editor-field">
					<label>Character Name</label>
					<input type="text" v-model="name" ref="inputName">
				</div>

				<div class="editor-field">
					<label>Description</label>
					<textarea v-model="description"></textarea>
				</div>

			</div>

		</div>
	</aside>`,

	watch: {
		open( isOpen, wasOpen ) {
			if ( isOpen && !wasOpen ) {
				this.$refs.inputName.focus();
			}
		}
	},

	methods: {

		select( selector ) {
			this.$emit( 'select', selector );
		},

		setCharacterProperty( key, value ) {
			let character = structuredClone( this.character );
			character[ key ] = value;
			this.update( character );
		},

		update( character ) {
			this.$emit( 'update', character );
		}

	}

});

Vue.component('traitSetEditor', {

	props: {
		character:  Object,
		open:       Boolean,
		traitSetID: Number,
	},

	data() {
		return {
			scrollPosition: 'none',
		}
	},

	computed: {

		traitSet() {
			let s = this.traitSetID;
			return this.character.traitSets[s];
		},

		name: {
			get() {
				return this.traitSet.name;
			},
			set( name ) {
				this.setTraitSetProperty( 'name', name );
			}
		},

		description: {
			get() {
				return this.traitSet.description;
			},
			set( description ) {
				this.setTraitSetProperty( 'description', description );
			}
		},

	},

	/*html*/
	template: `<section :class="{'editor': true, 'open': open, 'scrollable': false, 'scroll-at-top': scrollPosition === 'top', 'scroll-at-bottom': scrollPosition === 'bottom', 'no-scroll': scrollPosition === 'none' }">

		<div class="editor-arrow"></div>

		<div class="editor-controls">
			<button @click.stop="select([])"><i class="fas fa-times"></i></button>
			<button class="editor-delete" @click.stop="removeTraitSet"><i class="fas fa-trash"></i></button>
		</div>

		<div class="editor-inner" @scroll="checkScroll">

			<div class="editor-fields">

				<div class="editor-field">
					<label>Trait Set Name</label>
					<input type="text" v-model="name" ref="inputName">
				</div>

				<div class="editor-field">
					<label>Description</label>
					<textarea v-model="description"></textarea>
				</div>

			</div>

		</div>
	</section>`,

	mounted() {

		this.checkScroll();

		if ( this.open ) {
			this.$refs.inputName.focus();
		}
		
	},

	watch: {
		open( isOpen, wasOpen ) {
			if ( isOpen && !wasOpen ) {
				this.$refs.inputName.focus();
			}
		}
	},

	methods: {

		select( selector ) {
			this.$emit( 'select', selector );
		},

		setTraitSetProperty( key, value ) {

			let character = structuredClone( this.character );
			let s = this.traitSetID;

			character.traitSets[s][ key ] = value;

			this.update( character );

		},

		removeTraitSet() {
			this.$emit( 'removeTraitSet', this.traitSetID );
		},

		update( character ) {
			this.$emit( 'update', character );
		},

		checkScroll() {

			let element = this.$el.querySelector('.editor-inner');

			let distance = element.scrollTop;
			let max      = element.scrollHeight - element.clientHeight;

			if ( max <= 0 ) {
				this.scrollPosition = 'none';
				return;
			}

			if ( distance === 0 ) {
				this.scrollPosition = 'top';
				return;
			}

			if ( distance >= max ) {
				this.scrollPosition = 'bottom';
				return;
			}

			this.scrollPosition = 'middle';
			return;

		},

	}

});

Vue.component('traitEditor', {

	props: {
		character:  Object,
		open:       Boolean,
		traitSetID: Number,
		traitID:    Number,
	},

	data() {
		return {
			scrollPosition: 'none',
		}
	},

	computed: {

		trait() {
			let s = this.traitSetID;
			let t = this.traitID;
			return this.character.traitSets[s].traits[t];
		},

		name: {
			get() {
				return this.trait.name;
			},
			set( name ) {
				this.setTraitProperty( 'name', name );
			}
		},

		value: {
			get() {
				return this.trait.value;
			},
			set( value ) {
				this.setTraitProperty( 'value', value );
			}
		},

		description: {
			get() {
				return this.trait.description;
			},
			set( description ) {
				this.setTraitProperty( 'description', description );
			}
		},

	},

	/*html*/
	template: `<section :class="{'editor': true, 'open': open, 'scrollable': true, 'scroll-at-top': scrollPosition === 'top', 'scroll-at-bottom': scrollPosition === 'bottom', 'no-scroll': scrollPosition === 'none' }">

		<div class="editor-arrow"></div>

		<div class="editor-controls">
			<button @click.stop="select([])"><i class="fas fa-times"></i></button>
			<button class="editor-delete" @click.stop="removeTrait"><i class="fas fa-trash"></i></button>
		</div>

		<div class="editor-inner" @scroll="checkScroll">
	
			<div class="editor-fields">

				<div class="editor-field">
					<label>Trait Name</label>
					<input type="text" v-model="name" ref="inputName">
				</div>

				<div class="editor-field">

					<label>Trait Value</label>

					<ul class="editor-values">
						<li
							v-for="value in [4,6,8,10,12]"
							:class="{ 'active': value === trait.value }"
							@click.stop="toggleTraitValue( value )"
						>
							<span class="c" v-html="getDieDisplayValue(value)"></span>
						</li>
					</ul>

				</div>

				<div class="editor-field">
					<label>Description</label>
					<textarea v-model="description"></textarea>
				</div>

				<!-- SFX -->
				<div class="editor-field">

					<label>SFX</label>

					<sfx-editor
						v-for="(effect, effectID) in trait.sfx"
						:key="traitSetID + '-' + traitID + '-' + effectID"
						:character="character"
						:traitSetID="traitSetID"
						:traitID="traitID"
						:effectID="effectID"
						@update="update"
						@removeEffect="removeEffect"
					></sfx-editor>

					<div class="editor-subgroup">
						<button class="editor-button editor-button-add editor-button-tertiary" @click.stop="addEffect"><i class="fas fa-plus"></i> New SFX</button>
					</div>

				</div>

			</div>

		</div>
	</section>`,

	mounted() {

		this.checkScroll();

		if ( this.open ) {
			this.$refs.inputName.focus();
		}

	},

	watch: {
		open( isOpen, wasOpen ) {
			if ( isOpen && !wasOpen ) {
				this.$refs.inputName.focus();
			}
		}
	},

	methods: {

		select( selector ) {
			this.$emit( 'select', selector );
		},

		setTraitProperty( key, value ) {

			let character = structuredClone( this.character );
			let s = this.traitSetID;
			let t = this.traitID;

			character.traitSets[s].traits[t][ key ] = value;

			this.update( character );

		},

		toggleTraitValue( value ) {

			if ( value === this.trait.value ) {
				value = null;
			}

			this.setTraitProperty( 'value', value );

		},

		removeTrait() {
			this.$emit( 'removeTrait', this.traitSetID, this.traitID );
		},

		addEffect() {

			let character = structuredClone( this.character );
			let s = this.traitSetID;
			let t = this.traitID;

			character.traitSets[s].traits[t].sfx.push({
				name: 'New SFX',
				description: 'SFX description',
			});

			this.update( character );

		},

		removeEffect( effectID ) {

			let character = structuredClone( this.character );
			let s = this.traitSetID;
			let t = this.traitID;
			let f = effectID;

			character.traitSets[s].traits[t].sfx.splice(f, 1);

			this.update( character );

		},

		update( character ) {
			this.$emit( 'update', character );
		},

		checkScroll() {

			let element = this.$el.querySelector('.editor-inner');

			let distance = element.scrollTop;
			let max      = element.scrollHeight - element.clientHeight;

			if ( max <= 0 ) {
				this.scrollPosition = 'none';
				return;
			}

			if ( distance === 0 ) {
				this.scrollPosition = 'top';
				return;
			}

			if ( distance >= (max - 1) ) { // slight buffer 
				this.scrollPosition = 'bottom';
				return;
			}

			this.scrollPosition = 'middle';
			return;

		},

		getDieDisplayValue( value ) {
			return cortexFunctions.getDieDisplayValue( value );
		},

	}

});

Vue.component('sfxEditor', {

	props: {
		character:  Object,
		selected:   Array,
		traitSetID: Number,
		traitID:    Number,
		effectID:   Number,
	},

	data() {
		return {}
	},

	computed: {

		effect() {
			let s = this.traitSetID;
			let t = this.traitID;
			let f = this.effectID;
			return this.character.traitSets[s].traits[t].sfx[f];
		},

		selector() {
			return [ 'sfx', this.traitSetID, this.traitID, this.effectID ];
		},

		name: {
			get() {
				return this.effect.name;
			},
			set( name ) {
				this.setEffectProperty( 'name', name );
			}
		},

		description: {
			get() {
				return this.effect.description;
			},
			set( description ) {
				this.setEffectProperty( 'description', description );
			}
		},

	},

	/*html*/
	template: `<section class="editor-subgroup">
	
		<div class="editor-fields">

			<div class="editor-field">
				<label>SFX Name</label>
				<input type="text" v-model="name">
			</div>

			<div class="editor-field">
				<label>SFX Description</label>
				<textarea v-model="description"></textarea>
			</div>

			<button class="editor-button editor-button-remove editor-button-tertiary" @click.prevent="removeEffect"><i class="fas fa-trash"></i> Remove SFX</button>

		</div>

	</section>`,

	methods: {

		setEffectProperty( key, value ) {

			let character = structuredClone( this.character );
			let s = this.traitSetID;
			let t = this.traitID;
			let f = this.effectID;

			character.traitSets[s].traits[t].sfx[f][ key ] = value;

			this.update( character );

		},

		update( character ) {
			this.$emit( 'update', character );
		},

		removeEffect() {
			this.$emit( 'removeEffect', this.effectID );
		},

	}

});

Vue.component('portraitEditor', {

	props: {
		character: Object,
		open:      Boolean
	},

	data() {
		return {}
	},

	computed: {

		hasImage() {
			return Boolean( this.character.portrait.url.length );
		}

	},

	/*html*/
	template: `<aside :class="{ 'editor': true, 'editor-character': true, 'open': open, 'scrollable': false }">

		<div class="editor-arrow"></div>

		<div class="editor-controls">
			<button @click.stop="select([])"><i class="fas fa-times"></i></button>
			<button v-if="hasImage" class="editor-delete" @click.stop="setImageURL('')"><i class="fas fa-trash"></i></button>
		</div>

		<div class="editor-inner">

			<div class="editor-fields">

				<div class="editor-field">

					<label>Portrait</label>

					<img class="portrait-preview"
						v-if="hasImage"
						:src="character?.portrait?.url"
						@click.prevent="uploadStart"
					>

					<button
						class="editor-button"
						@click.prevent="uploadStart"
					><i class="fas fa-plus"></i> Upload {{ hasImage ? 'New' : '' }} Image</button>

					<input class="portrait-input" type="file" ref="inputFile" @change="uploadProcess">

				</div>

			</div>

		</div>
	</aside>`,

	methods: {

		select( selector ) {
			this.$emit( 'select', selector );
		},

		uploadStart() {
			this.$refs.inputFile.click();
		},

		setImageURL( url ) {
			let character = structuredClone( this.character );
			character.portrait.url = url;
			this.update( character );
		},

		uploadProcess( event ) {

			if ( !event.target.files || !event.target.files.length ) {
				this.setImageURL( '' );
				return;
			}
			
			let file = event.target.files[0];

			let reader = new FileReader();
			reader.readAsDataURL(file);
			reader.onload = () => {
			  this.setImageURL( reader.result );
			};
			reader.onerror = (error) => {
			  console.log('Portrait error: ', error);
			};

		},

		update( character ) {
			this.$emit( 'update', character );
		}

	}

});

document.addEventListener('DOMContentLoaded', () => {

	new Vue({

		name: 'cortex-tools',

		el: '#cortex-tools',

		data: {
			baseURL:   window.location.href,
			character: null,
			selected:  null,

		},

		computed: {

		},

		/*html*/
		template: `<article id="cortex-tools">
		
			<header class="header">
				<div class="header-inner">

				</div>
			</header>

			<main class="main">
			
				<!-- CHARACTER SHEET -->
				<character-sheet
					v-if="character"
					:character="character"
					:selected="selected"
					@select="select"
					@update="updateCharacter"
				></character-sheet>

			</main>

			<aside class="about">

				<div class="about-logo">
					<a href="https://cortexrpg.com" target="_blank"><img src="images/cortex_community_logo_white.png"></a>
				</div>

				<div class="about-legal">
					<p>Cortex Prime is the award-winning world-building tabletop RPG system for forging unique, compelling game experiences from a set of modular rules mechanics available at CortexRPG.com </p>
					<p>Cortex is ©️ 2022 Fandom, Inc. Cortex, Cortex Prime, associated logos and trade dress are the trademarks of Fandom, Inc. Iconography used with permission.</p>
					<p>If you wish to publish or sell what you make using this tool, it is your responsibility to ensure you have the proper license or right for any resources used. No rights are granted through the use of this tool.</p>
				</div>

			</aside>

		</article>`,
		
		mounted() {

			this.loadLocal();

		},

		watch: {
			character( character ) {
				pageTitle = 'Cortex Tools';
				if ( character.name && character.name.length ) {
					pageTitle = `${character.name} | ${pageTitle}`;
				}
				document.title = pageTitle;
			},
		},

		methods: {

			// MANAGEMENT

			async createDefaultCharacter() {

				let character = await fetch( this.baseURL + 'data/cortex_character_default.json' )
				.then( response => response.json() );

				//+ Check for errors

				character.id = crypto.randomUUID();
				character.modified = ( new Date() ).getTime();

				return character;

			},

			updateCharacter( character ) {
				this.character = character;
				this.saveLocal();
			},

			select( selector ) {

				if ( cortexFunctions.arraysMatch( this.selected, selector ) ) {
					this.selected = [];
					return;
				}

				this.selected = selector;

			},

			async loadLocal() {

				let character = null;

				let localJSON = localStorage.getItem('cortexToolsData');
				if ( localJSON && localJSON.length ) {

					let localData = JSON.parse(localJSON);
					if ( localData ) {
						character = localData.character;
					}
	
				}

				if ( !character ) {
					character = await this.createDefaultCharacter();
				}

				this.character = character;

			},

			saveLocal() {

				this.character.modified = ( new Date() ).getTime();

				localStorage.setItem('cortexToolsData', JSON.stringify({
					character: this.character,
				}));
			},

		}

	});

});
